{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const getTopCharts = async () => {\n  const response = await axios.get(`${API_URL}/top-charts`);\n  return response.data;\n};\nexport const getSongs = async () => {\n  const response = await axios.get(`${API_URL}/songs`);\n  return response.data;\n};\nexport const getTopArtists = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/top-artists`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching top artists:', error.response || error.message);\n    throw error;\n  }\n};\nexport const getArtistDetails = async artistId => {\n  try {\n    const response = await axios.get(`${API_URL}/artists/${artistId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching details for artist ID ${artistId}:`, error.response || error.message);\n    throw error;\n  }\n};\nexport const getArtistSongs = async artistId => {\n  try {\n    const response = await axios.get(`${API_URL}/artists/${artistId}/songs`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching songs for artist ID ${artistId}:`, error.response || error.message);\n    throw error;\n  }\n};\nexport const getAlbums = async () => {\n  const response = await fetch('http://localhost:5000/api/albums');\n  if (!response.ok) {\n    throw new Error('Failed to fetch albums');\n  }\n  const data = await response.json();\n  return data;\n};\nexport const getAlbumSongs = async albumId => {\n  const response = await fetch(`http://localhost:5000/api/albums/${albumId}/songs`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch album songs');\n  }\n  const data = await response.json();\n  return data.songs; // Access the songs property from the response data\n};","map":{"version":3,"names":["axios","API_URL","getTopCharts","response","get","data","getSongs","getTopArtists","error","console","message","getArtistDetails","artistId","getArtistSongs","getAlbums","fetch","ok","Error","json","getAlbumSongs","albumId","songs"],"sources":["C:/Users/BR SAMYUKTHA/OneDrive/Documents/New folder/spotify-clone/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const getTopCharts = async () => {\r\n  const response = await axios.get(`${API_URL}/top-charts`);\r\n  return response.data;\r\n};\r\n\r\nexport const getSongs = async () => {\r\n  const response = await axios.get(`${API_URL}/songs`);\r\n  return response.data;\r\n};\r\n\r\n\r\n\r\nexport const getTopArtists = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/top-artists`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching top artists:', error.response || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getArtistDetails = async (artistId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/artists/${artistId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching details for artist ID ${artistId}:`, error.response || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getArtistSongs = async (artistId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/artists/${artistId}/songs`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching songs for artist ID ${artistId}:`, error.response || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const getAlbums = async () => {\r\n  const response = await fetch('http://localhost:5000/api/albums');\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch albums');\r\n  }\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport const getAlbumSongs = async (albumId) => {\r\n  const response = await fetch(`http://localhost:5000/api/albums/${albumId}/songs`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch album songs');\r\n  }\r\n  const data = await response.json();\r\n  return data.songs; // Access the songs property from the response data\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,aAAa,CAAC;EACzD,OAAOE,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMH,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,QAAQ,CAAC;EACpD,OAAOE,QAAQ,CAACE,IAAI;AACtB,CAAC;AAID,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,cAAc,CAAC;IAC1D,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAACE,OAAO,CAAC;IAC7E,MAAMF,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,YAAYW,QAAQ,EAAE,CAAC;IAClE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwCI,QAAQ,GAAG,EAAEJ,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAACE,OAAO,CAAC;IACnG,MAAMF,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOD,QAAQ,IAAK;EAChD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,YAAYW,QAAQ,QAAQ,CAAC;IACxE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsCI,QAAQ,GAAG,EAAEJ,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAACE,OAAO,CAAC;IACjG,MAAMF,KAAK;EACb;AACF,CAAC;AAGD,OAAO,MAAMM,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMX,QAAQ,GAAG,MAAMY,KAAK,CAAC,kCAAkC,CAAC;EAChE,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,MAAMZ,IAAI,GAAG,MAAMF,QAAQ,CAACe,IAAI,CAAC,CAAC;EAClC,OAAOb,IAAI;AACb,CAAC;AAED,OAAO,MAAMc,aAAa,GAAG,MAAOC,OAAO,IAAK;EAC9C,MAAMjB,QAAQ,GAAG,MAAMY,KAAK,CAAC,oCAAoCK,OAAO,QAAQ,CAAC;EACjF,IAAI,CAACjB,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,MAAMZ,IAAI,GAAG,MAAMF,QAAQ,CAACe,IAAI,CAAC,CAAC;EAClC,OAAOb,IAAI,CAACgB,KAAK,CAAC,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}